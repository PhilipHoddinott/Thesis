%% Master Program
% By Philip Hoddinott
%% Setup
close all; clear all; clc; % clear workspace

get_SATCAT_tog =0; % toggle for get_SATCAT 1 = run, 0 = don't run
get_Multiple_TLE_from_Id_tog =0;
%% get data
VarStore % run var store for stored variables, ugly but it works
%% func get_SATCAT
% Function to get a .mat file from the SATCAT

if get_SATCAT_tog==1 % if the satcat file is out of date, run this
    get_SATCAT % get SATCAT, comment out if already run
else % if the satcat file is recent then no nead to run get_SATCAT
    strNamMat = ['SATCAT_',num2str(launchYear),'.mat'];
    load(strNamMat); % load mat of SATCAT
    decayEnd=length(all_TLE(:,1));
end
fprintf('get_SATCAT.m has finished running\n');
relDeb=str2num(char(all_TLE(2:decayEnd,2))); % get NORAD CAT ID

%% func get_Multiple_TLE_from_Id
% Function to get tle txt files from the norat_cat_ids in the SATCAT
VarStore % run var store for stored variables, ugly but it works

if get_Multiple_TLE_from_Id_tog==1
    load('UserPass.mat') % load in username and password
    mkdir(tle_folder)% tle_text_files % note this will give a warning if folder already exists
    tleA = 1:tle_inc:decayEnd;
    tleA=[tleA,decayEnd];
    
    jStart =1; % starting value
        
    try

        for j = jStart:length(tleA)-1%1:length(tleA)-1
            get_Multiple_TLE_from_Id % returns 'outStr' String of TLE
        end
    catch ME
        fprintf('Error occured\n');
        jStart=j;
       switch ME.identifier
           case 'MATLAB:Connection timed out'
               warning('connection timed out, trying again\n');
               fprintf('Connection time out occured\n');
               jStart=j;
               for j = jStart:length(tleA)-1%1:length(tleA)-1
                    get_Multiple_TLE_from_Id % returns 'outStr' String of TLE
               end
       end
       rethrow(ME)
    end
end
fprintf('get_Multiple_TLE_from_Id.m has finished running\n');
%% Func readTLE_txt
% function to parse the txt files into a usable TLE, stored in a matrix
fprintf('readTLE_txt\n');
readTLE_txt
fprintf('readTLE_txt.m has finished running\n');

%% Func check_TLE_edit_TLE
% function to neatly sort TLEs, remove duplicates, and list TLEs that were
% not given
fprintf('check_TLE_Edit_TLE\n');
check_TLE_Edit_TLE
fprintf('check_TLE_Edit_TLE.m has finished running\n');



close all; clear all; % clear out everything
VarStore % run var store for stored variables, ugly but it works
strNam = ['TLE_',num2str(launchYear),'.mat']; % get strNam

load(strNam, 'tle_final')

tle_low=sortrows(tle_final(:,:),11);
save('Orbits_MOD_1/tle_low2high.mat','tle_low');

% Note that these files could be made functions in MATLAB. For debuggin
% purposes they currently are not 
%{
 fprintf('%s\n', repmat('-',1,50));
fprintf('Satellite: %s\n', A0);
fprintf('Catalog Number: %d\n', satnum);
fprintf('Epoch time: %s\n', A1(19:32)) % YYDDD.DDDDDDDD
fprintf('Inclination: %f deg\n', Incl)
fprintf('RA of ascending node: %f deg\n', Omega)
fprintf('Eccentricity: %f\n', ecc);
fprintf('Arg of perigee: %f deg\n', w);
fprintf('Mean anomaly: %f deg\n', M);
fprintf('Mean motion: %f rev/day\n', n);
fprintf('Period of rev: %.0f s/rev\n', T);
fprintf('Semi-major axis: %.0f meters\n', a);
fprintf('Semi-minor axis: %.0f meters\n', b);


tle_stor(j+1,1)=satnum;
tle_stor(j+1,2)=str2num(A1(19:32));
tle_stor(j+1,3)=Incl;
tle_stor(j+1,4)=Omega;
tle_stor(j+1,5)=ecc;
tle_stor(j+1,6)=w;
tle_stor(j+1,7)=M;
tle_stor(j+1,8)=n;
tle_stor(j+1,9)=T;
tle_stor(j+1,10)=a;
tle_stor(j+1,11)=b;
%}
tle_view=tle_final;
tle_view_temp=['norad_cat_id','Epoch time','Inclination (deg)','RAAN (deg)','Eccentricity (deg)','Arg of perigee(deg)','Mean anomaly (deg)','Mean motion (rev/day)','Period of rev (s/rev)','Semi-major axis (meter)','Semi-minor axis (meter)'];

tle_vew = [tle_view_temp;tle_view